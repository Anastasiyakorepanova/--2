import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;

public class Main {
    private BigInteger[] numbers;

    public Main(String filePath) throws IOException {
        String content = new String(Files.readAllBytes(Paths.get(filePath)));
        numbers = Arrays.stream(content.split("\\s+"))
                        .map(BigInteger::new)
                        .toArray(BigInteger[]::new);
    }

    public BigInteger _min() {
        return Arrays.stream(numbers).min(BigInteger::compareTo).orElseThrow();
    }

    public BigInteger _max() {
        return Arrays.stream(numbers).max(BigInteger::compareTo).orElseThrow();
    }

    public BigInteger _sum() {
        return Arrays.stream(numbers).reduce(BigInteger.ZERO, BigInteger::add);
    }

    public BigInteger _mult() {
        return Arrays.stream(numbers).reduce(BigInteger.ONE, BigInteger::multiply);
    }

    public static void main(String[] args) {
        try {
            long startTime, endTime;

            startTime = System.nanoTime();
            Main main = new Main("checking_time.txt");
            endTime = System.nanoTime();
            System.out.println("Time to load and parse numbers: " + (endTime - startTime) / 1_000_000 + " ms");

            startTime = System.nanoTime();
            System.out.println("Minimum: " + main._min());
            endTime = System.nanoTime();
            System.out.println("Time to find min: " + (endTime - startTime) / 1_000_000 + " ms");

            startTime = System.nanoTime();
            System.out.println("Maximum: " + main._max());
            endTime = System.nanoTime();
            System.out.println("Time to find max: " + (endTime - startTime) / 1_000_000 + " ms");

            startTime = System.nanoTime();
            System.out.println("Sum: " + main._sum());
            endTime = System.nanoTime();
            System.out.println("Time to compute sum: " + (endTime - startTime) / 1_000_000 + " ms");

            startTime = System.nanoTime();
            System.out.println("Product: " + main._mult());
            endTime = System.nanoTime();
            System.out.println("Time to compute product: " + (endTime - startTime) / 1_000_000 + " ms");

        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
    }
}
